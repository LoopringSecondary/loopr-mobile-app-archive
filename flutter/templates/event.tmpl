import 'dart:async';
import 'package:${appName}${relative}/index.dart';
import 'package:meta/meta.dart';

@immutable
abstract class ${upperName}Event {
  Future<${upperName}State> applyAsync(
      {${upperName}State currentState, ${upperName}Bloc bloc});
  final ${upperName}Provider _${privateName}Provider = new ${upperName}Provider();
}

class Load${upperName}Event extends ${upperName}Event {
  @override
  String toString() => 'Load${upperName}Event';

  @override
  Future<${upperName}State> applyAsync(
      {${upperName}State currentState, ${upperName}Bloc bloc}) async {
    try {
      await Future.delayed(new Duration(seconds: 2));
      this._${privateName}Provider.test();
      return new In${upperName}State();
    } catch (_) {
      print('Load${upperName}Event ' + _?.toString());
      return new Error${upperName}State(_?.toString());
    }
  }
}
